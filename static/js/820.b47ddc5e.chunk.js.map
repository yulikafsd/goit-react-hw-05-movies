{"version":3,"file":"static/js/820.b47ddc5e.chunk.js","mappings":"wQAsFA,UA3Ee,WAAO,IAAD,EACnB,GAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAoCJ,EAAAA,EAAAA,WAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAM,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,GAwD7C,OAtDAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,6FACQC,EADR,UACiBC,EAAAA,IADjB,OAC2BC,EAAAA,GAAAA,OAD3B,oBACqDC,EAAAA,GADrD,kBACsEjB,GADtE,SAIIK,GAAa,GAJjB,SAK2Ba,EAAAA,EAAAA,IAAUJ,EAAK,CAAEK,OAAQP,EAAWO,SAL/D,OAKUC,EALV,OAMIrB,GAAU,OAAIqB,EAASC,KAAKC,UAES,IAAjCF,EAASC,KAAKC,QAAQC,SACxBC,EAAAA,EAAAA,MATN,kDAYIC,QAAQC,IAAR,OACAC,EAAAA,EAAAA,MAbJ,yBAeItB,GAAa,GAfjB,+CAkBS,WACLO,EAAWgB,OACZ,IApBH,iEAHc,sBA0BA,KAAV5B,GA1BU,mCA2BZ6B,EAEH,GAAE,CAAC7B,KAEJW,EAAAA,EAAAA,YAAU,WACJT,IACFD,EAASQ,GACTN,GAAc,GAEjB,GAAE,CAACM,EAAQP,KAmBV,iCACE,SAAC,KAAD,CACE4B,MAAOrB,EACPsB,SApBN,SAAsBD,GACpBtB,EAA0B,KAAVsB,EAAe,CAAErB,OAAQqB,EAAME,eAAkB,CAAC,EACnE,EAmBKC,SAjBN,SAAqBC,GACnBA,EAAEC,iBACF,IAAMC,EAAgB3B,EAAO4B,OAEP,KAAlBD,GACFnC,EAASmC,GACT5B,EAAgB,CAAEC,OAAQ2B,EAAcJ,kBAExCM,EAAAA,EAAAA,KAEH,IASIlC,GAA+B,IAAlBN,EAAOyB,SAAgB,SAAC,KAAD,IACpCzB,EAAOyB,OAAS,IAAK,SAAC,KAAD,CAAgBzB,OAAQA,MAGnD,C","sources":["pages/Movies/Movies.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { SearchBar, FilteredMovies, Loader } from 'components';\nimport { API_END, API_URL, API_KEY } from 'service/ApiService';\nimport {\n  notifyError,\n  notifyEmptyString,\n  notifyNoResults,\n} from 'service/Notifications';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [isNewVisit, setIsNewVisit] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filter = searchParams.get('filter') ?? '';\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function fetchMoviesByQuery() {\n      const url = `${API_URL}${API_END.search}?api_key=${API_KEY}&query=${query}`;\n\n      try {\n        setIsLoading(true);\n        const response = await axios.get(url, { signal: controller.signal });\n        setMovies([...response.data.results]);\n\n        if (response.data.results.length === 0) {\n          notifyNoResults();\n        }\n      } catch (error) {\n        console.log(error);\n        notifyError();\n      } finally {\n        setIsLoading(false);\n      }\n\n      return () => {\n        controller.abort();\n      };\n    }\n\n    if (query !== '') {\n      fetchMoviesByQuery();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    if (isNewVisit) {\n      setQuery(filter);\n      setIsNewVisit(false);\n    }\n  }, [filter, isNewVisit]);\n\n  function changeFilter(value) {\n    setSearchParams(value !== '' ? { filter: value.toLowerCase() } : {});\n  }\n\n  function changeQuery(e) {\n    e.preventDefault();\n    const trimmedFilter = filter.trim();\n\n    if (trimmedFilter !== '') {\n      setQuery(trimmedFilter);\n      setSearchParams({ filter: trimmedFilter.toLowerCase() });\n    } else {\n      notifyEmptyString();\n    }\n  }\n\n  return (\n    <>\n      <SearchBar\n        value={filter}\n        onChange={changeFilter}\n        onSubmit={changeQuery}\n      />\n      {isLoading && movies.length === 0 && <Loader />}\n      {movies.length > 0 && <FilteredMovies movies={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["useState","movies","setMovies","query","setQuery","isNewVisit","setIsNewVisit","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","filter","get","useEffect","controller","AbortController","url","API_URL","API_END","API_KEY","axios","signal","response","data","results","length","notifyNoResults","console","log","notifyError","abort","fetchMoviesByQuery","value","onChange","toLowerCase","onSubmit","e","preventDefault","trimmedFilter","trim","notifyEmptyString"],"sourceRoot":""}