{"version":3,"file":"static/js/219.25bba32f.chunk.js","mappings":"sUAEaA,EAASC,EAAAA,GAAAA,IAAH,+FAONC,EAAOD,EAAAA,GAAAA,GAAH,6HAQJE,EAAOF,EAAAA,GAAAA,GAAH,yFAOJG,EAAWH,EAAAA,GAAAA,EAAH,uGAORI,EAAOJ,EAAAA,GAAAA,EAAH,6DAKJK,EAAOL,EAAAA,GAAAA,KAAH,iEAKJM,EAAUN,EAAAA,GAAAA,EAAH,yF,mBCgCpB,EAxDa,WACX,OAAwBO,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,6FACQC,EADR,UACiBC,EAAAA,IADjB,OAC2BC,EAAAA,GAAAA,SAD3B,OAC6CP,EAD7C,4BACwEQ,EAAAA,IADxE,kBAI2BC,EAAAA,EAAAA,IAAUJ,EAAK,CAAEK,OAAQP,EAAWO,SAJ/D,OAIUC,EAJV,OAKIZ,GAAQ,OAAIY,EAASC,KAAKd,OAL9B,gDAOIe,QAAQC,IAAR,MACsB,aAAlB,KAAMC,UACRC,EAAAA,EAAAA,MATN,0DAHc,sBAmBd,OAnBc,mCAiBdC,GAEO,WACLd,EAAWe,OACZ,CACF,GAAE,CAAClB,KAGF,iCACIF,IAAQ,SAACqB,EAAA,EAAD,IACTrB,IAASA,EAAKsB,OAAS,IACtB,SAACxB,EAAD,kEAEDE,GAAQA,EAAKsB,OAAS,IACrB,SAAC7B,EAAD,UACGO,EAAKuB,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC/BC,EAASD,EAAY,yCACWA,GAClCE,EACJ,OACE,UAACnC,EAAD,YACE,SAACH,EAAD,CAAQuC,IAAKF,EAAQG,IAAKN,EAAMO,MAAM,MAAMC,OAAO,SACnD,SAACtC,EAAD,UAAW8B,KACX,UAAC7B,EAAD,kBACK,SAACC,EAAD,UAAO6B,SAJHF,EAQd,QAKV,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Poster = styled.img`\n  display: block;\n  margin: 0;\n  padding: 0;\n  border-radius: 8px;\n`;\n\nexport const List = styled.ul`\n  display: inline-flex;\n  flex-wrap: wrap;\n  gap: 32px;\n  list-style: none;\n  margin-top: 16px;\n`;\n\nexport const Item = styled.li`\n  padding: 0;\n  margin: 0;\n  width: 300px;\n  color: #333333;\n`;\n\nexport const Subtitle = styled.p`\n  margin: 0;\n  font-weight: bold;\n  font-size: 18px;\n  text-align: center;\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n  text-align: center;\n`;\n\nexport const Span = styled.span`\n  color: #ff6d00;\n  font-weight: bold;\n`;\n\nexport const Message = styled.p`\n  text-align: center;\n  font-style: italic;\n  color: #ff6d00;\n`;\n","import axios from 'axios';\nimport { Loader } from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { API_END, API_URL, API_KEY } from 'service/ApiService';\nimport noProfileFoto from '../../images/NoProfileFoto.jpg';\nimport {\n  List,\n  Item,\n  Poster,\n  Subtitle,\n  Text,\n  Span,\n  Message,\n} from './Cast.styled';\nimport { notifyError } from 'service/Notifications';\n\nconst Cast = () => {\n  const [cast, setCast] = useState();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function fetchCastById() {\n      const url = `${API_URL}${API_END.details}${movieId}/credits?api_key=${API_KEY}`;\n\n      try {\n        const response = await axios.get(url, { signal: controller.signal });\n        setCast([...response.data.cast]);\n      } catch (error) {\n        console.log(error);\n        if (error.message !== 'canceled') {\n          notifyError();\n        }\n      }\n    }\n\n    fetchCastById();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {!cast && <Loader />}\n      {cast && !cast.length > 0 && (\n        <Message>Sorry, there is no cast available for this movie...</Message>\n      )}\n      {cast && cast.length > 0 && (\n        <List>\n          {cast.map(({ cast_id, name, character, profile_path }) => {\n            const imgSrc = profile_path\n              ? `https://image.tmdb.org/t/p/w300${profile_path}`\n              : noProfileFoto;\n            return (\n              <Item key={cast_id}>\n                <Poster src={imgSrc} alt={name} width=\"300\" height=\"450\" />\n                <Subtitle>{name}</Subtitle>\n                <Text>\n                  as <Span>{character}</Span>\n                </Text>\n              </Item>\n            );\n          })}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["Poster","styled","List","Item","Subtitle","Text","Span","Message","useState","cast","setCast","movieId","useParams","useEffect","controller","AbortController","url","API_URL","API_END","API_KEY","axios","signal","response","data","console","log","message","notifyError","fetchCastById","abort","Loader","length","map","cast_id","name","character","profile_path","imgSrc","noProfileFoto","src","alt","width","height"],"sourceRoot":""}